<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2022-10-30T06:56:04+08:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Jiayun’s page</title><subtitle>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.</subtitle><entry><title type="html">Java Carpooling application</title><link href="http://localhost:4000/projects/2022/09/28/javacarpoolingapp.html" rel="alternate" type="text/html" title="Java Carpooling application" /><published>2022-09-28T18:09:14+08:00</published><updated>2022-09-28T18:09:14+08:00</updated><id>http://localhost:4000/projects/2022/09/28/javacarpoolingapp</id><content type="html" xml:base="http://localhost:4000/projects/2022/09/28/javacarpoolingapp.html"><![CDATA[<p>In this project, we have built a java application for carpooling purpose somesort of the famous application in Europe – Blablacar. This project stressed more on the application design and less on the algorithm running behind.</p>

<p>Database design
<a href="\assets\images\java_database_design.jpg">
    <center>
        <img src="\assets\images\java_database_design.jpg" alt="Application design" />
    </center>
</a></p>

<p>Application design -MVC
<a href="\assets\images\java_applicationdesignMVC.jpg">
    <center>
        <img src="\assets\images\java_applicationdesignMVC.jpg" alt="Application design" />
    </center>
</a></p>]]></content><author><name></name></author><category term="projects" /><summary type="html"><![CDATA[In this project, we have built a java application for carpooling purpose somesort of the famous application in Europe – Blablacar. This project stressed more on the application design and less on the algorithm running behind.]]></summary></entry><entry><title type="html">Compiler for a programming language</title><link href="http://localhost:4000/projects/2022/09/24/compiler_deca.html" rel="alternate" type="text/html" title="Compiler for a programming language" /><published>2022-09-24T18:09:14+08:00</published><updated>2022-09-24T18:09:14+08:00</updated><id>http://localhost:4000/projects/2022/09/24/compiler_deca</id><content type="html" xml:base="http://localhost:4000/projects/2022/09/24/compiler_deca.html"><![CDATA[<p>In this project, we have built a compiler for a programming language under Java named Deca. This compiler is built under 3 main pilers, lexicographical and syntax analysis, Semantic analysis and Intermediate code generator. <a href="https://www.guru99.com/compiler-design-phases-of-compiler.html#"> (Compiler phases Explaination)</a> In summary, it first identifies the lexical units (token) in the source code such as identifier, mathematical operators or any predefined constant. Next, it analyses syntaxically correct of an expression and start to construct the expression into a tree. After this, it checks if a statement is semantically correct. (Correctly typed, declared variables …) And the end, generate assembly codes according to the tree constructed.
<a href="\assets\images\compiler_classes_design.png">
    <center>
        <img src="\assets\images\compiler_classes_design.png" alt="Tree expression" />
    </center>
</a></p>]]></content><author><name></name></author><category term="projects" /><summary type="html"><![CDATA[In this project, we have built a compiler for a programming language under Java named Deca. This compiler is built under 3 main pilers, lexicographical and syntax analysis, Semantic analysis and Intermediate code generator. (Compiler phases Explaination) In summary, it first identifies the lexical units (token) in the source code such as identifier, mathematical operators or any predefined constant. Next, it analyses syntaxically correct of an expression and start to construct the expression into a tree. After this, it checks if a statement is semantically correct. (Correctly typed, declared variables …) And the end, generate assembly codes according to the tree constructed.]]></summary></entry><entry><title type="html">Scrapping from a website and generate pdf reports using Latex</title><link href="http://localhost:4000/projects/2022/09/20/webscrap.html" rel="alternate" type="text/html" title="Scrapping from a website and generate pdf reports using Latex" /><published>2022-09-20T18:09:14+08:00</published><updated>2022-09-20T18:09:14+08:00</updated><id>http://localhost:4000/projects/2022/09/20/webscrap</id><content type="html" xml:base="http://localhost:4000/projects/2022/09/20/webscrap.html"><![CDATA[<p>On May 25, 2018, The General Data Protection Regulation (EU) became enforceable across Europe. The GDPR is an important millestone for privacy law and of human rights law. This project is meant to scrap from the web and dynamically generate report on the overview of fines and penalties which data protection authorities within the EU have imposed. It was written in Pyhon using libraries such as panda (manipulating data), jinja(to construct template) and pygoogletranslation (for govermental report written in non English). Here’s some examples of the report geneterated.</p>

<p><a href="https://github.com/kungfupandayun/kungfupandayun/tree/main/gdpr_data_analysis-master">
    Code Source
</a></p>

<p><a href="http://localhost:4000/assets/documents/report_2020_en.pdf">Here’s an example of the report (pdf)</a> <br />
<a href="http://localhost:4000/assets/documents/report_2020_fr.pdf">Here’s an example of the report (latex)</a> <br /></p>]]></content><author><name></name></author><category term="projects" /><summary type="html"><![CDATA[On May 25, 2018, The General Data Protection Regulation (EU) became enforceable across Europe. The GDPR is an important millestone for privacy law and of human rights law. This project is meant to scrap from the web and dynamically generate report on the overview of fines and penalties which data protection authorities within the EU have imposed. It was written in Pyhon using libraries such as panda (manipulating data), jinja(to construct template) and pygoogletranslation (for govermental report written in non English). Here’s some examples of the report geneterated.]]></summary></entry><entry><title type="html">Minesweeper in C++</title><link href="http://localhost:4000/projects/2022/09/16/minesweeper.html" rel="alternate" type="text/html" title="Minesweeper in C++" /><published>2022-09-16T18:09:14+08:00</published><updated>2022-09-16T18:09:14+08:00</updated><id>http://localhost:4000/projects/2022/09/16/minesweeper</id><content type="html" xml:base="http://localhost:4000/projects/2022/09/16/minesweeper.html"><![CDATA[<p>Minesweeper is a very common game. This game consists of a grid of clickable squares, with hidden “mines” scattered throughout the board. The objective is to clear the board without detonating any mines, with help from clues about the number of neighboring mines in each field.</p>

<p>This is my first project that i and my teammate developped back then in 2017. The technical part of this game is quite intuitive. The scatter of bombs using math.random. The calculation of hint done after the scatter of bombs.</p>

<p><a href="\assets\images\minesweeper.jpg">
    <center>
        <img src="\assets\images\minesweeper.jpg" alt="Minesweeper on terminal" />
    </center>
</a></p>

<p><a href="http://localhost:4000/assets/executables/demineur_final.zip">Here’s an executable file that you can download and play!</a></p>]]></content><author><name></name></author><category term="projects" /><summary type="html"><![CDATA[Minesweeper is a very common game. This game consists of a grid of clickable squares, with hidden “mines” scattered throughout the board. The objective is to clear the board without detonating any mines, with help from clues about the number of neighboring mines in each field.]]></summary></entry></feed>